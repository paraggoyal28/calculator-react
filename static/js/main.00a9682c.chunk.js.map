{"version":3,"sources":["components/Display/Display.tsx","components/Button/Button.tsx","components/Pad/Pad.tsx","components/App/App.tsx","serviceWorker.js","index.js"],"names":["StyledIndicatorList","styled","div","StyledExpression","span","StyledScreen","StyledDisplay","Screen","value","hasMemory","expression","StyledButton","button","color","css","colorToCss","isLarge","Button","children","onClick","StyledPad","Pad","onDigitButtonClick","onPointButtonClick","onOperatorButtonClick","onChangeSignButtonClick","onEqualButtonClick","onAllClearButtonClick","onClearEntryButtonClick","onMemoryRecallButtonClick","onMemoryClearButtonClick","onMemoryPlusButtonClick","onMemoryMinusButtonClick","handleKeyDown","keyCode","shiftKey","console","log","useEffect","document","body","addEventListener","removeEventListener","StyledApp","App","useState","memory","setMemory","result","setResult","waitingForOperand","setWaitingForOperand","pendingOperator","setPendingOperator","display","setDisplay","calculate","rightOperand","newResult","toString","slice","Display","digit","newDisplay","length","indexOf","operator","operand","Number","undefined","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.00a9682c.chunk.js","sourcesContent":["import React, { FunctionComponent } from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface DisplayProps {\r\n    hasMemory: boolean\r\n    expression: string\r\n    value: string\r\n}\r\n\r\nconst StyledIndicatorList = styled.div`\r\n    font-size: 0.75em;\r\n    line-height: 1;\r\n    opacity: 0.4;\r\n    text-align: right;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    margin-bottom: 0.25em;\r\n    min-height: 1em;\r\n`;\r\n\r\nconst StyledExpression = styled.span`\r\n    margin-left: auto;\r\n`;\r\n\r\nconst StyledScreen = styled.div`\r\n    font-size: 2.5em;\r\n    min-height: 1.4em;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: flex-end;\r\n    overflow: hidden;\r\n`;\r\n\r\nconst StyledDisplay = styled.div`\r\n    background-color: #393939;\r\n    color: #fff;\r\n    padding: 1.5em 1em;\r\n`;\r\n\r\nexport const Screen: FunctionComponent<DisplayProps> = ({ value, hasMemory, expression }) => {\r\n    return (\r\n        <StyledDisplay>\r\n            <StyledIndicatorList>\r\n                {hasMemory && \r\n                    <span>M</span>\r\n                }\r\n                <StyledExpression>\r\n                    {expression}\r\n                </StyledExpression>\r\n            </StyledIndicatorList>\r\n            <StyledScreen>\r\n                {value}\r\n            </StyledScreen>\r\n        </StyledDisplay>\r\n    )\r\n}\r\n\r\nexport default Screen;","import React, { FunctionComponent } from 'react';\r\nimport styled, { css } from 'styled-components';\r\n\r\ninterface ButtonProps {\r\n    color?: 'red' | 'green' | 'dark'\r\n    isLarge?: boolean\r\n    onClick?: () => void\r\n}\r\n\r\nconst colorToCss = (color: ButtonProps['color']) => {\r\n    switch(color) {\r\n        case 'red' : \r\n            return css`\r\n                background-color: #c04444;\r\n                color: #fff;\r\n\r\n                &:hover,\r\n                &:focus { \r\n                    background-color: #af3b3b;\r\n                }\r\n            `;\r\n        case 'green': \r\n            return css`\r\n                background-color: #018645;\r\n                color: #fff;\r\n                \r\n                &:hover,\r\n                &:focus {\r\n                    background-color: #016d38;\r\n                }\r\n            `;\r\n        case 'dark':\r\n            return css`\r\n                background-color: #272727;\r\n                color: #c5830d;\r\n\r\n                &:hover,\r\n                &:focus {\r\n                    background-color: #1a1a1a;\r\n                }\r\n            `;\r\n    }\r\n\r\n    return css`\r\n        background-color: #2e2e2e;\r\n        color: #fff;\r\n\r\n        &:hover,\r\n        &:focus {\r\n            background-color: #212121;\r\n        }        \r\n    `;\r\n}\r\n\r\nexport const StyledButton = styled.button<ButtonProps>`\r\n    font-family: inherit;\r\n    font-size: inherit;\r\n    border: 1px solid rgba(0, 0, 0, 0.05);\r\n    border-radius: 0;\r\n    padding-top: 1em;\r\n    padding-bottom: 1em;\r\n    transition: background-color 0.15s ease-in-out, opacity 0.15s ease-in-out;\r\n    ${({ color }) => colorToCss(color)}\r\n    ${({ isLarge }) => isLarge && css`\r\n        grid-column-end: span 2;\r\n    `}\r\n\r\n    &:focus {\r\n        outline: 0;\r\n    }\r\n\r\n    &:active {\r\n        opacity: 0.9;\r\n    }\r\n`;\r\n\r\nexport const Button: FunctionComponent<ButtonProps> = ({ children, color, isLarge, onClick }) => {\r\n    return (\r\n        <StyledButton color={color} isLarge={isLarge} onClick={onClick}>\r\n            {children}\r\n        </StyledButton>\r\n    )\r\n}\r\n\r\nexport default Button;","import React, { FunctionComponent, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport Button from '../Button/Button';\r\nimport { Digit, Operator } from '../../lib/types';\r\n\r\ninterface PadProps {\r\n    onDigitButtonClick: (digit: Digit) => void\r\n    onPointButtonClick: () => void\r\n    onOperatorButtonClick: (operator: Operator) => void\r\n    onChangeSignButtonClick: () => void\r\n    onEqualButtonClick: () => void\r\n    onAllClearButtonClick: () => void\r\n    onClearEntryButtonClick: () => void\r\n    onMemoryRecallButtonClick: () => void\r\n    onMemoryClearButtonClick: () => void\r\n    onMemoryPlusButtonClick: () => void\r\n    onMemoryMinusButtonClick: () => void\r\n}\r\n\r\nconst StyledPad = styled.div`\r\n    display: grid;\r\n    grid-template-columns: repeat(4, 1fr);\r\n    grid-auto-rows: 1fr;\r\n`;\r\n\r\nexport const Pad: FunctionComponent<PadProps> = ({\r\n    onDigitButtonClick,\r\n    onPointButtonClick,\r\n    onOperatorButtonClick,\r\n    onChangeSignButtonClick,\r\n    onEqualButtonClick,\r\n    onAllClearButtonClick,\r\n    onClearEntryButtonClick,\r\n    onMemoryRecallButtonClick,\r\n    onMemoryClearButtonClick,\r\n    onMemoryPlusButtonClick,\r\n    onMemoryMinusButtonClick\r\n}) => {\r\n    const handleKeyDown = ({ keyCode, shiftKey }: KeyboardEvent) => {\r\n        console.log(keyCode);\r\n        if (keyCode >= 48 && keyCode <= 57 && !shiftKey) {\r\n            onDigitButtonClick((keyCode - 48) as Digit);\r\n        } else if ((keyCode >= 96 && keyCode <= 105)) {\r\n            onDigitButtonClick((keyCode - 96) as Digit);\r\n        } else if (keyCode === 107 || (keyCode === 187 && shiftKey)) {\r\n            onOperatorButtonClick('+');\r\n        } else if (keyCode === 109 || keyCode === 189) {\r\n            onOperatorButtonClick('-');\r\n        } else if (keyCode === 106 || (keyCode === 56 && shiftKey)) {\r\n            onOperatorButtonClick('×');\r\n        } else if (keyCode === 111 || keyCode === 191) {\r\n            onOperatorButtonClick('÷');\r\n        } else if (keyCode === 13 || (keyCode === 187 && !shiftKey)) {\r\n            onEqualButtonClick();\r\n        } else if (keyCode === 46) {\r\n            onClearEntryButtonClick();\r\n        } else if (keyCode === 27) {\r\n            onAllClearButtonClick();\r\n        } else if (keyCode === 78) {\r\n            onChangeSignButtonClick();\r\n        } else if (keyCode === 80) {\r\n            onMemoryPlusButtonClick();\r\n        } else if (keyCode === 81) {\r\n            onMemoryMinusButtonClick();\r\n        } else if (keyCode === 82) {\r\n            onMemoryRecallButtonClick();\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        document.body.addEventListener('keydown', handleKeyDown);\r\n        return () => document.body.removeEventListener('keydown', handleKeyDown);\r\n    });\r\n\r\n    return (\r\n        <StyledPad>\r\n            <Button onClick={onMemoryRecallButtonClick}>\r\n                MR\r\n            </Button>\r\n            <Button onClick={onMemoryClearButtonClick}>\r\n                MC\r\n            </Button>\r\n            <Button onClick={onMemoryPlusButtonClick}>\r\n                M+\r\n            </Button>\r\n            <Button onClick={onMemoryMinusButtonClick}>\r\n                M-\r\n            </Button>\r\n            <Button onClick={onAllClearButtonClick} color=\"red\">\r\n                AC\r\n            </Button>\r\n            <Button onClick={onClearEntryButtonClick}>\r\n                C\r\n            </Button>\r\n            <Button onClick={onChangeSignButtonClick}>\r\n                -/+\r\n            </Button>\r\n            <Button color=\"dark\" onClick={() => onOperatorButtonClick('÷')}>\r\n                ÷\r\n            </Button>\r\n            <Button onClick={() => onDigitButtonClick(7)}>\r\n                7\r\n            </Button>\r\n            <Button onClick={() => onDigitButtonClick(8)}>\r\n                8\r\n            </Button>\r\n            <Button onClick={() => onDigitButtonClick(9)}>\r\n                9\r\n            </Button>\r\n            <Button color=\"dark\" onClick={() => onOperatorButtonClick('×')}>\r\n                ×\r\n            </Button>\r\n            <Button onClick={() => onDigitButtonClick(4)}>\r\n                4\r\n            </Button>\r\n            <Button onClick={() => onDigitButtonClick(5)}>\r\n                5\r\n            </Button>\r\n            <Button onClick={() => onDigitButtonClick(6)}>\r\n                6\r\n            </Button>\r\n            <Button color=\"dark\" onClick={() => onOperatorButtonClick('-')}>\r\n                -\r\n            </Button>\r\n            <Button onClick={() => onDigitButtonClick(1)}>\r\n                1\r\n            </Button>\r\n            <Button onClick={() => onDigitButtonClick(2)}>\r\n                2\r\n            </Button>\r\n            <Button onClick={() => onDigitButtonClick(3)}>\r\n                3\r\n            </Button>\r\n            <Button color=\"dark\" onClick={() => onOperatorButtonClick('+')}>\r\n                +\r\n            </Button>\r\n            <Button onClick={() => onDigitButtonClick(0)}>\r\n                0\r\n            </Button>\r\n            <Button onClick={onPointButtonClick}>\r\n                .\r\n            </Button>\r\n            <Button color=\"green\" isLarge={true} onClick={onEqualButtonClick}>\r\n                =\r\n            </Button>\r\n        </StyledPad>\r\n    )\r\n}\r\n\r\nexport default Pad;","import React, { FunctionComponent, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport Display from '../Display/Display';\r\nimport Pad from '../Pad/Pad';\r\nimport { Digit, Operator } from '../../lib/types';\r\n\r\n\r\nconst StyledApp = styled.div`\r\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Seoge UI Symbol\";\r\n    font-size: 16px;\r\n    width: 100%;\r\n    max-width: 320px;\r\n`\r\n\r\nexport const App: FunctionComponent = () => {\r\n    // Calculator's states\r\n    const [memory, setMemory] = useState<number>(0);\r\n    const [result, setResult] = useState<number>(0);\r\n    const [waitingForOperand, setWaitingForOperand] = useState<boolean>(true);\r\n    const [pendingOperator, setPendingOperator] = useState<Operator>();\r\n    const [display, setDisplay] = useState<string>('0');\r\n\r\n    const calculate = (rightOperand: number, pendingOperator: Operator): boolean => {\r\n        let newResult = result;\r\n\r\n        switch (pendingOperator) {\r\n            case '+' : \r\n                newResult += rightOperand;\r\n                break\r\n            case '-':\r\n                newResult -= rightOperand;\r\n                break\r\n            case '×':\r\n                newResult *= rightOperand;\r\n                break;\r\n            case '÷':\r\n                if(rightOperand === 0){\r\n                    return false;\r\n                }\r\n                newResult /= rightOperand;\r\n        }\r\n        setResult(newResult);\r\n        setDisplay(newResult.toString().toString().slice(0, 12));\r\n\r\n        return true;\r\n    }\r\n\r\n    // Pad buttons handlers\r\n    const onDigitButtonClick = (digit: Digit) => {\r\n        let newDisplay = display;\r\n\r\n        if ((display === '0' && digit === 0) || display.length > 12) {\r\n            return;\r\n        }\r\n\r\n        if (waitingForOperand) {\r\n            newDisplay = ''\r\n            setWaitingForOperand(false);\r\n        }\r\n\r\n        if (display !== '0') {\r\n            newDisplay = newDisplay + digit.toString();\r\n        } else {\r\n            newDisplay = digit.toString();\r\n        }\r\n\r\n        setDisplay(newDisplay);\r\n    }\r\n\r\n    const onPointButtonClick = () => {\r\n        let newDisplay = display;\r\n\r\n        if (waitingForOperand) {\r\n            newDisplay = '0';\r\n        }\r\n\r\n        if (newDisplay.indexOf('.') === -1) {\r\n            newDisplay = newDisplay + '.'\r\n        }\r\n\r\n        setDisplay(newDisplay);\r\n        setWaitingForOperand(false);\r\n    }\r\n\r\n    const onOperatorButtonClick = (operator: Operator) => {\r\n        const operand = Number(display);\r\n\r\n        if (typeof pendingOperator !== 'undefined' && !waitingForOperand) {\r\n            if (!calculate(operand, pendingOperator)) {\r\n                return;\r\n            }\r\n        } else {\r\n            setResult(operand);\r\n        }\r\n        \r\n        setPendingOperator(operator);\r\n        setWaitingForOperand(true);\r\n    }\r\n\r\n    const onChangeSignButtonClick = () => {\r\n        const value = Number(display)\r\n\r\n        if (value  > 0) {\r\n            setDisplay('-' + display);\r\n        } else if (value < 0){\r\n            setDisplay(display.slice(1));\r\n        }\r\n    }\r\n\r\n    const onEqualButtonClick = () => {\r\n        const operand = Number(display);\r\n\r\n        if (typeof pendingOperator !== 'undefined' && !waitingForOperand) {\r\n            if(!calculate(operand, pendingOperator)) {\r\n                return;\r\n            }\r\n\r\n            setPendingOperator(undefined);\r\n        } else {\r\n            setDisplay(operand.toString());\r\n        }\r\n        setResult(operand);\r\n        setWaitingForOperand(true);\r\n    }\r\n\r\n    const onAllClearButtonClick = () => {\r\n        setMemory(0);\r\n        setResult(0);\r\n        setPendingOperator(undefined);\r\n        setDisplay('0');\r\n        setWaitingForOperand(true);\r\n    }\r\n\r\n    const onClearEntryButtonClick = () => {\r\n        setDisplay('0');\r\n        setWaitingForOperand(true);\r\n    }\r\n\r\n    const onMemoryRecallButtonClick = () => {\r\n        setDisplay(memory.toString());\r\n        setWaitingForOperand(true);\r\n    }\r\n\r\n    const onMemoryClearButtonClick = () => {\r\n        setMemory(0);\r\n        setWaitingForOperand(true);\r\n    }\r\n\r\n    const onMemoryPlusButtonClick = () => {\r\n        setMemory(memory + Number(display));\r\n        setWaitingForOperand(true);\r\n    }\r\n\r\n    const onMemoryMinusButtonClick = () => {\r\n        setMemory(memory - Number(display));\r\n        setWaitingForOperand(true);\r\n    }\r\n\r\n    return (\r\n        <StyledApp>\r\n            <Display value={display} hasMemory={memory !== 0} expression={typeof pendingOperator !== 'undefined' ? `${result}${pendingOperator}${waitingForOperand ? ''  : display}` :  ''} />\r\n            <Pad\r\n                onDigitButtonClick={onDigitButtonClick}\r\n                onPointButtonClick={onPointButtonClick}\r\n                onOperatorButtonClick={onOperatorButtonClick}\r\n                onChangeSignButtonClick={onChangeSignButtonClick}\r\n                onEqualButtonClick={onEqualButtonClick}\r\n                onAllClearButtonClick={onAllClearButtonClick}\r\n                onClearEntryButtonClick={onClearEntryButtonClick}\r\n                onMemoryRecallButtonClick={onMemoryRecallButtonClick}\r\n                onMemoryClearButtonClick={onMemoryClearButtonClick}\r\n                onMemoryPlusButtonClick={onMemoryPlusButtonClick}\r\n                onMemoryMinusButtonClick={onMemoryMinusButtonClick}\r\n            />\r\n        </StyledApp>\r\n    )\r\n\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}